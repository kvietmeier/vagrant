# -*- mode: ruby -*-
# vi: set ft=ruby :
# Created By: Karl Vietmeier
# Basic Vagrantfile for a single VM with comments

### Set some variables
# Path to the local users public key file in $HOME/.ssh
# We use it later in the shell provisioner to populate authorized_keys
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip
wslsshkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/wslsshkey_id_rsa.pub").first.strip


Vagrant.configure(2) do |config|
  config.vm.box = "centos/7"
  #config.vm.box = "generic/rhel7"

  # Set the VM OS level Hostname
  config.vm.hostname = "centos"

  # Set the Vagrant vm name for stdout while starting VM
  config.vm.define "centos"

  ###------- Network setup section - not Provider specific
  # You can create additional private networks which are configured as host-only networks by the Provider
  # If you don't create a private network the default NAT network of the provider will be used.
  # The first interface will always be the default NAT network, private networks get added as additional
  # interfaces
  # If the network doesn't exist - based on Subnet - it will be created in the Provider (VBox, VMware) 

  # Define a range of usable ports for automatic port mapping
  config.vm.usable_port_range= 2800..2900

  # Create 2 interfaces on 2 host-only networks
  # Can choose a NIC Type [--nictype<1-N> Am79C970A|Am79C973| 82540EM|82543GC|82545EM| virtio] 
  config.vm.network "private_network", ip: "172.16.0.200"
  config.vm.network "private_network", ip: "172.10.0.200"

  # Do some port mapping - Vagrant will try 2222 for SSH if it is in use it will grab the first 
  # unused port in the above range
  config.vm.network "forwarded_port", guest: 22, host: 2901
  config.vm.network "forwarded_port", guest: 80, host: 2902
  config.vm.network "forwarded_port", guest: 8080, host: 2903
  config.vm.network "forwarded_port", guest: 9000, host: 9000

  # Need to test this one more
  #config.vm.synced_folder "./nginx", "/var/www", create: true, group: "nginx", owner: "nginx"

  ###------- Provider specific VM definition and creation begins here
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |vb|

    # Add VM to a group in VBox (restart VBox GUI to see)
    vb.customize ["modifyvm", :id, "--groups", "/Testing" ]

    # Set the name in Virtualbox (GUI and CLI)
    vb.name = "centos"

    # Configure the amount of memory and number of CPUs for the VM:
    vb.memory = "512"
    vb.cpus = "1"

    ###-------  Configure low level system parameters
    # - get rid of extra stuff
    # - need "ioapic on" when adding extra drives
    # - use "vb.customize" when modifying parameters that don't have predefined aliases like "vb.cpu"
    vb.customize ["modifyvm", :id, "--ioapic", "on" ]
    vb.customize ["modifyvm", :id, "--audio", "none" ]
    vb.customize ["modifyvm", :id, "--usb", "off" ]

    ###------- Add Disks -------###
    ###--- You can have a SATA and an NVMe controller but not 2 SATA or 2 NVMe
    
    #-- SATA --#
    #-- Add controller
    vb.customize ['storagectl', :id, '--name', 'SATA Controller', '--add', 'sata', '--controller', 'IntelAhci', '--portcount', 6]

    # Create drive/s 
    sata_disk = 'SATA-Disk.vdi'
    unless File.exist? (sata_disk)
      vb.customize ['createhd', '--filename', sata_disk, '--size', "512"]
    end  # End create disk

    # Attach the drive to the controller
    vb.customize [ 'storageattach', :id, '--storagectl', 'SATA Controller', '--port', "2", '--device', 0, '--type', 'hdd', '--medium', sata_disk]

    #-- NVME --#
    # Add controller - bootable has to be off
    #vb.customize ['storagectl', :id, '--name', 'NVMe Controller', '--add', 'pcie', '--controller', 'NVMe', '--portcount', '1', '--bootable', 'off']
    vb.customize ["storagectl", :id, "--name", "nvme", "--add", "pcie", "--controller", "NVMe", "--portcount", "1", "--bootable", "off"]

    # Create drive/s 
    nvme_disk = 'NVMe-Disk.vdi'
    unless File.exist? (nvme_disk)
      vb.customize ["createhd", "--filename", nvme_disk, "--variant", "Fixed", "--size", "512"]
    end

    # Attach the drive to the controller
    #vb.customize [ 'storageattach', :id, '--storagectl', 'NVMe Controller', '--port', '0', '--type', 'hdd', '--medium', nvme_disk]
    vb.customize ["storageattach", :id, "--storagectl", "nvme", "--type", "hdd", "--medium", nvme_disk, "--port", "0"]

    ###------ End Disks ------###

  end ###--- End Provider

  ###-----------------------------------------------------------------------------------###
  ###-------------------           Provisioner Section               -------------------###
  ###-----------------------------------------------------------------------------------###
  ### Uses a combination of inline shell, file, and external shell scripts
  ### NOTE - You need to explicitely name each provisioner or it will run once for every
  ###        iteration of a loop in a multi-machine setting 

  # INLINE
  # Add the host system user's public key to .ssh/authorized_keys for root and vagrant users
  # - could move this to a script file but it is here as an example of an inline script
  config.vm.provision "Setup shell environment", type: "shell" do |s|
    s.inline = <<-SHELL
    # Add the public keys "adminvm" is a VM I use for testing things like Ansible
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
    echo "Appending user@Laptop keys to root and vagrant authorized_keys"
    echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
    echo #{wslsshkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{wslsshkey} >> /root/.ssh/authorized_keys
    echo "Appending AdminVM keys to root and vagrant authorized_keys"
    echo #{adminvm_karlvkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_karlvkey} >> /root/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /root/.ssh/authorized_keys

    SHELL
  end #--- End inline Provisioner
  
  ### Type=file
  # Copy in the hosts file
  config.vm.provision "Copy /etc/hosts", type: "file" do |file|
    file.source = "../../scripts/env/hosts" 
    file.destination =  "~/hosts"
  end  

  ### Demonstrate using external shell scripts 
  #   Scripts are located under the the top level Vagrant folder I use so I can share them
  #   * Basic Bootstrap Tasks 
  #   * spdk
  #   * nginx
  #   * docker
  
  # Bootstrap - Run on every node
  config.vm.provision "Basic Setup - bootstrap a node", type: "shell" do |script|
    script.path = "../../scripts/bash/config/bootstrap.sh"
  end

  # nginx
  #config.vm.provision "Setup nginx", type: "shell" do |script|
  #  script.path = "../../scripts/bash/nginx/setupnginx.sh"
  #end
  
  # Docker
  #config.vm.provision "Install Docker", type: "shell" do |script|
  # script.path = "../../scripts/bash/docker/setupdocker.sh"
  #end

  # SPDK
  #config.vm.provision "Install SPDK", type: "shell" do |script|
  #  script.path = "../../scripts/bash/config/spdk.sh"
  #end



  ### Example of a Reboot in the middle of provisioning (not working)
  # Requires vagrant-reload plugin
  # https://github.com/aidanns/vagrant-reload/blob/master/README.md

  # Isn't working - causes a reconfiguration - not just a reboot

  #config.vm.provision "Setup shell environment", type: "shell" do |s|
  #  s.inline = <<-SHELL
  #  echo "Do something once"  
  #  echo $(date) > ~/rebootexample
  #  SHELL
  #end

  # Trigger reload
  #config.vm.provision :reload

  # Do something after the reload
  #config.vm.provision "Setup shell environment", type: "shell" do |s|
  #  s.inline = <<-SHELL
  #  echo "I just rebooted - continuing"
  #  echo $(date) >> ~/rebootexample
  #  SHELL
  #end


end ###--- End configure(2) - this wraps up the wholething - like main()
