# -*- mode: ruby -*-
# # vi: set ft=ruby :
# Vagrantfile to create multiple generic virtual machines based on a yaml dictionary.
#
#    From: http://blog.scottlowe.org/2014/10/22/multi-machine-vagrant-with-yaml/
#    Modfified By: Karl Vietmeier
#
# Requires "servers.yml" to be in local directory
 
# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version ">= 1.6.0"
VAGRANTFILE_API_VERSION = "2"
 
# Require YAML module
require 'yaml'
 
# Read YAML file with box details
servers = YAML.load_file(File.join(File.dirname(__FILE__), 'servers.yml'))

# Define some variables
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip

# Not used right now
ssh_user = "vagrant"
ssh_pass = "vagrant"

# Create Virtual Machines
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Default is 2200..something, but port 2200 is used by some tools
  config.vm.usable_port_range = 2800..2900
 
  # Iterate through entries in YAML file
  servers.each do |servers|
    config.vm.define servers["name"] do |srv|
      srv.vm.box = servers["box"]
      srv.vm.hostname = servers["name"]
      srv.vm.network "forwarded_port", guest: 22, host: servers["port"]
      srv.vm.network "private_network", ip: servers["ip1"]
      srv.vm.network "private_network", ip: servers["ip2"]

      # VM parameters
      srv.vm.provider :virtualbox do |vb|
        # Create a group in Virtualbox
        vb.customize ["modifyvm", :id, "--groups", "/DevOps" ]
        
        # Basic VM config - modify in servers.yml
        vb.name = servers["name"]
        vb.memory = servers["ram"]
        vb.cpus = servers["cpus"]
        
        # Create drive/s 
        unless File.exist?("#{servers["name"]}disk-01.vdi")
         vb.customize ['createmedium', '--filename', "#{servers["name"]}disk-01.vdi", '--size', 1024]
        end  # End create disk
        
        vb.customize ['storagectl', :id, '--name',  'SATA Controller', '--add', 'sata',  '--controller', 'IntelAhci', '--portcount', 4]
        vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', "./#{servers["name"]}disk-01.vdi"]
      end # vm.provider

      ### We want to add the local user's public key to .ssh/authorized_keys 
      ### and get a working /etc/hosts
      config.vm.provision "Setup shell environment", type: "shell" do |s|
        s.inline = <<-SHELL
          # Add the public key
          mkdir /root/.ssh
          chmod 700 /root/.ssh
          touch /root/.ssh/authorized_keys
          echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
          echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
          # Copy /etc/hosts
          if [ -e /vagrant/files/hosts ]
            then sudo cat /vagrant/files/hosts >> /etc/hosts
          elif [ -e /home/vagrant/sync/files/hosts ]
            then sudo cat /home/vagrant/sync/files/hosts >> /etc/hosts
          fi     
        SHELL
      end # config.provision

      # Copy in the hosts file
      config.vm.provision "file", source: "../../scripts/env/hosts", destination: "~/hosts"
      
      ### External shell scripts for configuration
      # - Run on every node
      config.vm.provision "bootstrap", type: "shell" do |script|
        script.path = "../../scripts/bash/config/bootstrap.sh"
      end
     
      # Role based setup is in the servers.yml file - pull it out as a key:value
      config.vm.provision "Role", type: "shell" do |script|
        script.path = "../../scripts/bash/k8s/#{servers["script"]}"
      end
     
      # Example - inline code placeholder
      #if ("#{servers["name"]}").include? "osd"
      #  config.vm.provision "Setup shell environment", type: "shell" do |s|
      #    s.inline = <<-SHELL
      #     echo "Provision Every Node"
      #    SHELL
      #  end 
      #end

      ###---- End Provisioning

    end  # config.vm.define
  end  #servers.each
end  # Vagrant.configure



