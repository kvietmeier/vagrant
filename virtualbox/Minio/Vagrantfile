# -*- mode: ruby -*-
# vi: set ft=ruby :
# Vagrantfile to create a bootstrapped Storage cluster configuration
# Requires "servers.yml" to be in local directory
#
# Will create multiple nodes with several disks per node
# Created By: Karl Vietmeier
 
# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version ">= 1.6.0"
VAGRANTFILE_API_VERSION = "2"
 
# Require YAML module
require 'yaml'
 
# Read YAML file with multi-machine node configurations
servers = YAML.load_file(File.join(File.dirname(__FILE__), 'servers.yml'))

# Define some variables
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip

# Not used right now
ssh_user = "vagrant"
ssh_pass = "vagrant"

# Create Virtual Machines
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Default is 2200..something, but port 2200 is used by some tools
  config.vm.usable_port_range = 2800..2900
  config.vm.synced_folder '.', '/vagrant', disabled: true

  # Iterate through entries in YAML file - "servers" is a yaml dictionary to iterate over using Ruby syntax.
  servers.each do |servers|
    config.vm.define servers["name"] do |srv|
      # Make sure the VMs get named correctly in the corect locations
      srv.vm.box = servers["box"]
      srv.vm.hostname = servers["name"]

      # Network setup
      srv.vm.network "forwarded_port", guest: 22, host: servers["ssh_port"]
      srv.vm.network "forwarded_port", guest: 9000, host: servers["minio_port"]
      srv.vm.network "private_network", ip: servers["ip1"]
      srv.vm.network "private_network", ip: servers["ip2"]

      ###-------   VirtualBox Provider - Build the Physical VM and configure devices
      srv.vm.provider :virtualbox do |vb|
        
        # Basic VM config - modify in servers.yml
        vb.name = servers["name"]
        vb.memory = servers["ram"]
        vb.cpus = servers["cpus"]
        
        ###-------- Configure system parameters
        #  Get rid of extra stuff and use the right chipsets
        #  --groups : Create a VM group in VirtualBox
        #  --ioapic : Enable APIC support
        {
          '--audio' => 'none',
          '--usb' => 'off',
          '--ioapic' => 'on',
          '--chipset' => 'ich9'
        }.each { |k, v| vb.customize ['modifyvm', :id, k.to_s, v.to_s] }

        vb.customize ["modifyvm", :id, "--groups", "/StorageNodes" ]

        # Support for the SSE4.x instruction is required in some versions of VB.
        {
          'VBoxInternal/CPUM/SSE4.1' => '1',
          'VBoxInternal/CPUM/SSE4.2' => '1'
        }.each { |k, v| vb.customize ['setextradata', :id, k.to_s, v.to_s] }

        ###--------      SATA Controller setup     ---------###
        #vb.customize ['storagectl', :id,
        #  '--name', 'SATA Controller',
        #  '--add', 'sata',
        #  '--controller', 'IntelAhci',
        #  '--portcount', 6
        #]

        ###-------- NVMe Controller and Disk setup ---------###
        # Create NVMe controller - don't crerate it if the drive already exists (we are restarting the VM)
        vb.customize [
          'storagectl', :id,
          '--name', 'NVMe Controller',
          '--add', 'pcie',
          '--controller', 'NVMe',
          '--portcount', '6',
          '--bootable', 'off'
        ] unless File.exist?("#{servers['name']}-Data01.vdi")

        # Loop through servers.yml and check the hostmame - not really needed here but might 
        # want to add other logic later
        if servers['name'].to_s.include? 'minio'
          (1..3).each do |num|
            # Create the drives
            vb.customize [
              'createmedium',
              '--filename', "#{servers['name']}-Data0#{num}.vdi",
              '--variant', 'Fixed',
              '--size', '512'
            ] unless File.exist?("#{servers['name']}-Data0#{num}.vdi")

            # Attach the drives
            vb.customize [
              'storageattach', :id,
              '--storagectl', 'NVMe Controller',
              '--port', num.to_s,
              '--type', 'hdd',
              '--medium', "./#{servers['name']}-Data0#{num}.vdi"
            ] unless File.exist?("#{servers['name']}-Data0#{num}.vdi")
          end # End drive creation and attachment loop

        end  # End Server VM configuration loop over servers.yml

      end # End VirtualBox Provider - VM Configuration

      ###-----------------------------------------------------------------------------------###
      ###-------------------           Provisioner Section               -------------------###
      ###-----------------------------------------------------------------------------------###
      ### Uses a combination of inline shell, file, and external shell scripts
      ### NOTE - You need to explicitely name each provisioner or it will run once for every
      ###        loop iteration
      
      # INLINE
      # Add the host system user's public key to .ssh/authorized_keys for root and vagrant users
      # - should move this to a script file but it is here as an example of an inline script
      config.vm.provision "Setup shell environment", type: "shell" do |s|
        s.inline = <<-SHELL
          # Install some tools
          #yum install -y net-tools traceroute git ansible gcc make python > /dev/null 2>&1 
          # Add the public key
          mkdir /root/.ssh
          chmod 700 /root/.ssh
          touch /root/.ssh/authorized_keys
          echo "Appending user@Laptop keys to root and vagrant authorized_keys"
          echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
          echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
          echo "Appending AdminVM keys to root and vagrant authorized_keys"
          echo #{adminvm_karlvkey} >> /home/vagrant/.ssh/authorized_keys
          echo #{adminvm_karlvkey} >> /root/.ssh/authorized_keys
          echo #{adminvm_rootkey} >> /home/vagrant/.ssh/authorized_keys
          echo #{adminvm_rootkey} >> /root/.ssh/authorized_keys
   
        SHELL
      end # inline shell provisioner config.provision
      
      # Copy in the hosts file
      config.vm.provision "Copy /etc/hosts", type: "file" do |file|
         file.source = "../../scripts/env/hosts" 
         file.destination =  "~/hosts"
      end  
      
      ### External shell scripts for configuration
      # - Run on every node - basic pre-flight
      config.vm.provision "bootstrap", type: "shell" do |script|
         script.path = "../../scripts/bash/config/bootstrap.sh"
      end

      # - Run on every node -Minio common stuff
      #config.vm.provision "Install Ceph Common Stuff", type: "shell" do |script|
      #   script.path = "../../scripts/bash/minio/minio-common.sh"
      #end

      # Role based setup is in the servers.yml file - pull it out as a key:value
      #config.vm.provision "Role", type: "shell" do |script|
      #   script.path = "../../scripts/bash/minio/#{servers["script"]}"
      #end
      
      ###--------------------- End Provisioning

    end  # config.vm.define
  end  # End servers.each configuration loop over servers.yml
end  # Vagrant.configure



