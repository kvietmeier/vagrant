# -*- mode: ruby -*-
# # vi: set ft=ruby :
# RHEL Vagrantfile using triggers to unregister VM.
# Created By: Karl Vietmeier

# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version ">= 1.6.0"
VAGRANTFILE_API_VERSION = "2"

# Require YAML module
require 'yaml'
 
# Read YAML file with multi-machine node configurations
rht_creds = YAML.load_file("#{Dir.home}/Documents/Projects/vagrant/certs/rht.yml")

### Set some variables
# Path to the local users public key file in $HOME/.ssh
# We use it later in the shell provisioner to populate authorized_keys
ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
adminvm_karlvkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_karlv_id_rsa.pub").first.strip
adminvm_rootkey = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/adminvm_root_id_rsa.pub").first.strip

# Red Hat Credentials
rht_pass = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/rht_password.txt").first.strip
rht_user = File.readlines("#{Dir.home}/Documents/Projects/vagrant/certs/rht_user.txt").first.strip


###================================================   Main   ==================================================###
Vagrant.configure("2") do |config|

  # Use RHEL Box
  config.vm.box = "generic/rhel7"

  ### - need to put lots of stuff here - 


  ###------------------------------   Provisioning   -------------------------------###
  config.vm.provision "Setup shell environment", type: "shell" do |s|
    s.inline = <<-SHELL

    # Add the public keys "adminvm" is a VM I use for testing things like Ansible
    mkdir /root/.ssh
    chmod 700 /root/.ssh
    touch /root/.ssh/authorized_keys
   
    echo "Appending user@Laptop keys to root and vagrant authorized_keys"
    echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
    echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
   
    echo "Appending AdminVM keys to root and vagrant authorized_keys"
    echo #{adminvm_karlvkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_karlvkey} >> /root/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /home/vagrant/.ssh/authorized_keys
    echo #{adminvm_rootkey} >> /root/.ssh/authorized_keys

    # Register with RHN
    echo "-----------------------------------"
    echo "  Registering with Red Hat Portal"
    echo "-----------------------------------"
    # Credentials stored elsewhere - not pushed to github reference the rht_creds hash
    subscription-manager register --username #{rht_creds["user"]} --password #{rht_creds["pass"]}
    subscription-manager attach --pool=#{rht_creds["rhel_pool"]} > /dev/null 2>&1
    subscription-manager repos --disable=* > /dev/null 2>&1
    rm -fr /var/cache/yum/*
    yum clean all > /dev/null 2>&1
    subscription-manager repos --enable=#{rht_creds["rhel7_repo"]} > /dev/null 2>&1
    subscription-manager repos --enable=#{rht_creds["rhel7_supp_repo"]} > /dev/null 2>&1

    SHELL
  end ###--- End Inline Provisioner

  #{servers["name"]}-OS

  ###------------------------------   Triggers   -------------------------------###
  # Use Triggers - Cleanup RHEL subscription before destroy  - this works.
  config.trigger.before :destroy do |trigger|
    trigger.name = "Unregister RHN Guest"
    trigger.info = "Unregister"
    trigger.run_remote = {inline: "subscription-manager remove --all && subscription-manager unregister; subscription-manager clean"}
  end

  # This one is broken opened Issue on it
  #config.trigger.before :destroy do |trigger|
  #  trigger.name = "Unregister RHN Guest"
  #  trigger.info = "Unregister"
  #  trigger.run_remote = {inline: "<<-SHELL
  #  subscription-manager remove --all
  #  subscription-manager unregister
  #  subscription-manager clean
  #  SHELL
  #  "}
  #end

  ###--- End Triggers

end # End Main